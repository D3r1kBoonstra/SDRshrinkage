\documentclass{article}

\usepackage{mathtools}
\usepackage{amssymb}
\usepackage{geometry}
\geometry{margin = 1in}
\usepackage{graphicx}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{array}
\usepackage{multirow}
\usepackage{wrapfig}
\usepackage{float}
\usepackage{colortbl}
\usepackage{pdflscape}
\usepackage{tabu}
\usepackage{threeparttable}
\usepackage{threeparttablex}
\usepackage[normalem]{ulem}
\usepackage{makecell}
\usepackage{xcolor}

\begin{document}

% Title
\begin{center}
Eigen Analysis of Precision Shrinkage Estimators
\end{center}

<<echo = FALSE>>=
knitr::opts_chunk$set(echo = FALSE,
                      error = TRUE,
                      collapse = TRUE,
                      message = FALSE,
                      fig.path = "eigen_figures/",
                      fig.height = 8)
@

<<results='hide'>>=
library("tidyverse");library("qqplotr");theme_set(theme_minimal())
precs <- miscset::lload("./saved_sims", pattern = "_mats.RData")
seq_along(precs[[2]])
out <- lapply(seq_along(precs), function(i) {
  lapply(seq_along(precs[[i]]), function(j) {
    precs[[i]][[j]]$ProjMat
  })
})

precs[[2]]
precs[[2]][[1]]
precs[[2]][[1]]
lapply(precs, function)
@

<<>>=
methods <- c("MLE", "Haff", "Wang", "Bodnar", "MRY")
num_zero <- function(x) sum(zapsmall(round(x, 5)) == 0)
lapply(1:length(methods), function(i){
lapply(seq_along(precs), function(j){
    lapply(seq_along(precs[[j]][[i]]), function(k){
      prec <- precs[[j]][[i]][[k]]
      c("n_entries" = length(prec), "n_zero" = num_zero(prec))
    }) |> 
      do.call(rbind, args = _)
  }) |> 
    do.call(rbind, args = _) |> 
    as.data.frame() |> 
    summarise(sum(n_zero)/sum(n_entries)*100) |> 
    round(2) |> 
    setNames(methods[[i]])
}) |> 
  unlist()
@


<<>>=
prec_analysis <- function(prec_list, title = "Dataset"){
  
  ## Helper fns
  upper_tri <- function(x){
  x[lower.tri(x)]<- NA
  #return
  x
  }
  
  ggarrange_temp <- function(...){
    ggpubr::ggarrange(..., ncol = 1, align = "hv")
  }

  methods <- c("MLE", "Haff", "Wang", "Bodnar", "MRY")
  n_methods <- length(methods)
  k <- length(prec_list[[1]])
  
  eigs <- lapply(1:n_methods, function(i) {
    lapply(1:k, function(j) {
      eigen(prec_list[[i]][[j]])
    })
  })
  
  eig_vals <- lapply(1:n_methods, function(i){
    lapply(1:k, function(j){
      eigs[[i]][[j]]$values
    })|> 
      do.call(cbind, args = _) |> 
      as.data.frame() |> 
      setNames(paste0("Class", 1:k)) |> 
      mutate("vector" = 1:n())
  }) |> 
    do.call(rbind, args = _) |> 
    mutate("precision" = rep(methods,
                             each = n()/n_methods) |> 
             as_factor())
  
  eig_vects <- lapply(1:n_methods, function(i){
    lapply(1:k, function(j){
      eigs[[i]][[j]]$vectors
    }) 
  }) 
  
precs_plot <- lapply(seq_along(prec_list), function(i){
    temp <- lapply(seq_along(prec_list[[i]]), function(j){
      colors <- cbind(palette.colors(n = j, palette = "Set 1"), 
                      palette.colors(n = j, palette = "Set 2"))
      dimnames(prec_list[[i]][[j]]) <- NULL
      df <- prec_list[[i]][[j]] |> 
        round(5) |> 
        zapsmall() |> 
        upper_tri() |>
        # scale() |>
        reshape2::melt(na.rm = TRUE) |>
        mutate("class" = rep(paste0("Class", j), times = n()),
              "precision" = rep(methods[[i]], times = n()) |>
                as_factor())
    p <- df |>   
    ggplot(aes(Var1, Var2, fill = value)) +
    geom_tile(color = "black")+
    coord_flip()+
    facet_wrap(~ precision) +
      scale_y_continuous(breaks = scales::breaks_pretty())+
      scale_x_continuous(breaks = scales::breaks_pretty())+
      scale_fill_gradient2(low = colors[j,1], high = colors[j, 2], mid = "white", midpoint = 0)+
      labs(fill = "", x = "Feature", y = "Feature")+
      theme(strip.background = element_rect(fill="lightgrey"))
    
    if(j != 1) {
       p <- p + 
        theme(axis.text.y = element_blank(), 
              axis.title.y = element_blank())
    }
     
    if(i == 1) p <- p + labs(fill = paste0("Class ", j))
    if(i != length(prec_list)) p <- p + theme(axis.text.x = element_blank(), 
                                              axis.title.x = element_blank())
    p
    }) |> 
    do.call(ggpubr::ggarrange, args = _)
  }) |> 
  do.call(ggarrange_temp, args = _)

  vects_plot <- 
  lapply(seq_along(eig_vects), function(i){
    lapply(seq_along(eig_vects[[i]]), function(j){
      (Re(eig_vects[[i]][[j]]) |> 
        cor() |> 
        acos() * (180 / pi)) |> 
        upper_tri() |> 
        reshape2::melt(na.rm = TRUE) |> 
        filter(Var1 != Var2) |> 
        mutate("class" = rep(paste0("Class", j), times = n()),
              "precision" = rep(methods[[i]], times = n()) |> 
                as_factor())
    }) |> 
      do.call(rbind, args = _)
  }) |> 
    do.call(rbind, args = _) |> 
    ggplot(aes(Var1, Var2, fill = value)) +
    geom_tile(color = "black")+
    coord_flip()+
    facet_wrap(class ~ precision, nrow = k, 
               labeller = function (labels) {
                 labels <- lapply(labels, as.character)
                 a <-  do.call(paste, c(labels, list(sep = ",")))
                 list(gsub("\\,","-",a))
               })+
     scale_y_continuous(breaks = scales::breaks_pretty())+
      scale_x_continuous(breaks = scales::breaks_pretty())+
    scale_fill_gradient2(low = "red", high = "#52c569", mid = "white", midpoint = 90)+
    theme(strip.background = element_rect(fill="lightgrey"))+
    labs(y = "Eigen-Vector", x = "Eigen-Vector", fill = "Angle", 
         title = paste0(title, " Dataset"))
  
  vals_plot <- eig_vals |> 
    pivot_longer(starts_with("class"), names_to = "class") |> 
    mutate("class_prec" = paste0(class, "-", precision)) |> 
    ggplot(aes(Re(vector), Re(value), color = precision))+
    geom_point()+
    geom_line()+
    facet_wrap(class ~ precision, nrow = k, scales = "free_y", 
               labeller = function (labels) {
                 labels <- lapply(labels, as.character)
                 a <-  do.call(paste, c(labels, list(sep = ",")))
                 list(gsub("\\,.*"," ",a))
               })+
    theme(strip.background = element_rect(fill="lightgrey"))+
    scale_color_manual(values = c("purple", "#6495ED", "#21918c", "#5ec962", "#fde725"))+
    labs(x = "Eigen-Vector", y = "Eigen-Value", color = "Precision")
  
  
  list(precs_plot, vects_plot, vals_plot)
}
@

<<>>=
names(precs)
prec_analysis(precs[[7]])[[3]]
# BC is good for sparsity & possibly eigen-vec structure
# Peng is good for eigen-val structure
@


<<warning=FALSE>>=
dataset_names <- c("Autism","Bands", "Breast Cancer", "Dry Beans", "Divorce", "Ecoli", "Penguins","SPECT Heart",  "Wheat")
for(i in c(1:3, 5, 8, 7, 9, 6, 4)){
  print(prec_analysis(precs[[i]], title = dataset_names[[i]]))
}
@

<<>>=
# out <- prec_analysis(precs[[3]])
# out[[1]]+
#   labs(title = "Figure 1: Precision Estimators Eigen-Vector Structures", subtitle = "Wisconsin Breast Cancer Dataset")
# 
# out[[2]]+
#   labs(title = "Figure 2: Precision Estimators Eigen-Values", 
#        subtitle = "Wisconsin Breast Cancer Dataset")
@


<<>>=
print_f <- function(prec_list){
  methods <- c("MLE", "Haff", "Wang", "Bodnar", "MRY")
  n_methods <- length(methods)
  k <- length(prec_list[[1]])

  for(i in 1:k){
    for(j in 1:n_methods){
      dimnames(prec_list[[j]][[i]]) <- NULL
      prec_list[[j]][[i]] |>
        zapsmall() |> 
        print()
    }
  }
}

print_f(precs[[2]])

names(precs)
precs[[2]]
@


<<>>=
upper_tri <- function(x){
    x[lower.tri(x)]<- NA
    #return
    x
}
is_symmetric <- function(mat) {
  return(all(mat == t(mat)))
}
out[[2]]

f <- function(proj_mat_list){
  lapply(proj_mat_list, function(x)
  reshape2::melt(x)) |>
  do.call(rbind, args = _) |>
  mutate("method" = rep(c("MLE", "Haff", "Wang", "Bodnar", "MRY"), 
                        each = n()/5
                        ) |> 
           as_factor()
         ) |> 
  ggplot(aes(Var1, Var2, fill = value)) +
  geom_tile(color = "black")+
    coord_flip()+
  facet_wrap(~method, nrow = 1)+
  scale_fill_gradient2(low = "red", high = "#52c569", mid = "white", midpoint = 0)+
  theme(strip.background = element_rect(fill="lightgrey"), 
        legend.position = "bottom")+
    labs(x = "", y = "", fill = "magnitude")
}

names(precs)
lapply(out, f)

precs[[1]]$MRY$ProjDat

f(out[[1]])

out[[1]][[1]] |> 
  reshape2::melt()
lapply(out[[1]], is_symmetric)
@

<<>>=
lapply(group_dat, nrow)

z <- HDShOP::InvCovShrinkBGP16(239, 9, diag(9), S_inv[[2]])


S_inv[[1]]

all.equal(solve(S_inv[[1]]), z$S)
@



\end{document}
